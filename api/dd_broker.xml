<class name="dd_broker">
    DoubleDecker broker API
    <constructor>
        Create a new DoubleDecker broker
    </constructor>
    <destructor>
        Destroy a DoubleDecker broker
    </destructor>
    <method name="start">
        Start the broker, blocking until it is stopped.
        <return type="integer"/>
    </method>
    <method name="actor">
        Start an actor version of the broker, returning a zactor_t object.
        The actor version runs in a separate thread, using the zactor_t object to communicate with the starting thread.
        <return type="zactor"/>
    </method>
    <method name="set_scope">
        Set the broker scope.
        The scope is a numerical representation of the position in the broker hierarchy.
        The hierarchy is currently set to 3 levels, "regionId/clusterId/nodeId".
        A broker in region 0, cluster 1, node 2, would have the scope string "0/1/2"
        <argument name="scope" type="string"/>
        <return type="integer"/>
    </method>
    <method name="set_rest_uri">
        Set the URI of the broker REST interface.
        For example "tcp://127.0.0.1:8080" , instead of an IP address, "*:8008" allows you to listen to all.
        <argument name="restURI" type="string"/>
        <return type="integer"/>
    </method>

    <method name="set_logfile">
        Set the logging file of the broker
        <argument name="logfile" type="string"/>
        <return type="integer"/>
    </method>

    <method name="set_loglevel">
        Set the broker loglevel, as a single character string.
        Where "e":error,"w":warning,"n":notice,"i":info, and "d":debug.
        "q" will keep all logging quiet
        <argument name="loglevel" type="string"/>
        <return type="integer"/>
    </method>
    <method name="ready">
        Checks if the broker is ready to be started, i.e. if the necessary configuration has been done.
        <return type="boolean"/>
    </method>
    <method name="del_router">
        Remove a broker URI
        <argument name="routerURI" type="string"/>
        <return type="integer"/>
    </method>
    <method name="add_router">
        Add a router URI, where the broker listens for new connections
        <argument name="routerURI" type="string"/>
        <return type="integer"/>
    </method>
    <method name="get_router">
        Return the current configuration of the routerURI
        <return type="string"/>
    </method>
    <method name="set_dealer">
        Set the dealer URI for the broker to connect to, typically another brokers router address.
        <argument name="dealerURI" type="string"/>
        <return type="integer"/>
    </method>
    <method name="set_config">
        Set the configuration file for the broker, given in CZMQ style format
        <argument name="configfile" type="string"/>
        <return type="integer"/>
    </method>
    <method name="set_keyfile">
        Set the key file for the broker, as generated by ddkeys.py
        <argument name="keyfile" type="string"/>
        <return type="integer"/>
    </method>

</class>
