<class name="dist_client">
  DoubleDecker distant client class
  <constructor>
    Create a new distant client
    <argument name="name" type="string"/>
    <argument name="broker" type="zframe"/>
    <argument name="distance" type="integer"/>
  </constructor>
  <destructor>
    Destroy a distant client
  </destructor>
  <method name = "is" singleton = "1">
    Probe the supplied object, and report if it looks like a dd_dist_client_t.
    <argument name = "self" type = "anything" />
    <return type = "boolean" />
  </method>
  <method name="get_name">
    Get the full name of this client
    <return type="string"/>
  </method>
  <method name="get_broker">
    Get the broker sockid 
    <return type="zframe"/>
  </method>
  <method name="get_distance">
    Get the distance of this client
    <return type="integer"/>
  </method>
  <method name="hash">
    Get the hash value of this distant client
    <return type = "number" size = "4"/>
  </method>
    <method name="json">
    Convert the object to JSON and return
    <return type="json_object" fresh="1"/>
  </method>
  <method name="set_name">
    Set the full name of this client
    <argument name="name" type="string"/>
    <return type="nothing"/>
  </method>
  <method name="set_broker">
    Set the broker sockid 
    <argument name="sockid" type="zframe"/>
    <return type="nothing"/>
  </method>
  <method name="set_distance">
    Set the distance of this client
    <argument name="distance" type="integer"/>
    <return type="nothing"/>
  </method>
</class>

