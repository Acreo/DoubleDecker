/*  =========================================================================
    dd_client_actor - DoubleDecker client actor

        Copyright (c) 2015 Pontus Sköldström, Bertrand Pechenot           
                                                                            
        This file is part of libdd, the DoubleDecker hierarchical           
        messaging system DoubleDecker is free software; you can             
        redistribute it and/or modify it under the terms of the GNU Lesser  
        General Public License (LGPL) version 2.1 as published by the Free  
        Software Foundation.                                                
                                                                            
        As a special exception, the Authors give you permission to link this
        library with independent modules to produce an executable,          
        regardless of the license terms of these independent modules, and to
        copy and distribute the resulting executable under terms of your    
        choice, provided that you also meet, for each linked independent    
        module, the terms and conditions of the license of that module. An  
        independent module is a module which is not derived from or based on
        this library.  If you modify this library, you must extend this     
        exception to your version of the library.  DoubleDecker is          
        distributed in the hope that it will be useful, but WITHOUT ANY     
        WARRANTY; without even the implied warranty of MERCHANTABILITY or   
        FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
        License for more details.  You should have received a copy of the   
        GNU Lesser General Public License along with this program.  If not, 
        see http://www.gnu.org/licenses/.                                   
    =========================================================================
*/

#ifndef DD_CLIENT_ACTOR_H_INCLUDED
#define DD_CLIENT_ACTOR_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif


//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/dd_client_actor.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef DD_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a new DoubleDecker client actor, with some parameters
DD_EXPORT dd_client_actor_t *
    dd_client_actor_new (const char *client_name, const char *endpoint, const char *keyfile);

//  To work with dd_client_actor, use the CZMQ zactor API:                                              
//                                                                                                      
//  // create an actor with a embedded dd_client                                                        
//   dd_client_actor_t *actor_conf = dd_client_actor_new("client1","tcp://localhost:5555,"./keys.json");
//                                                                                                      
//  // start actor                                                                                      
//  zactor_t *dd_client_actor = zactor_new (dd_client_actor_actor, actor_conf);                         
//                                                                                                      
//  // receive message on "dd_client_actor" as if it is a zsock_t                                       
//  zmsg_t *msg = zmsg_recv(handle);                                                                    
//                                                                                                      
//  // send message through the client                                                                  
//  zsock_send(dd_client_actor, "sss", "subscribe", topic, scope);                                      
//                                                                                                      
//  // destroy the actor                                                                                
//  zactor_destroy (&dd_client_actor);                                                                  
DD_EXPORT void
    dd_client_actor (zsock_t *pipe, void *args);

//  *** Draft method, for development use, may change without warning ***
//  Subscribe to a topic.
DD_EXPORT int
    dd_client_actor_subscribe (zactor_t *actor, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Unsubscribe from a topic.
DD_EXPORT int
    dd_client_actor_unsubscribe (zactor_t *actor, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Publish a message on a topic. It's the callers responsibility to free the message.
DD_EXPORT int
    dd_client_actor_publish (zactor_t *actor, const char *topic, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Send a notification to another DD client. It's the callers responsibility to free the message.
DD_EXPORT int
    dd_client_actor_notify (zactor_t *actor, const char *target, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
DD_EXPORT void
    dd_client_actor_test (bool verbose);

#endif // DD_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
