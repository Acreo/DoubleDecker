dd_client_actor(3)
==================

NAME
----
dd_client_actor - DoubleDecker client actor

SYNOPSIS
--------
----
//  This API is a draft, and may change without notice.
#ifdef DD_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a new DoubleDecker client actor, with some parameters
DD_EXPORT dd_client_actor_t *
    dd_client_actor_new (const char *client_name, const char *endpoint, const char *keyfile);

//  To work with dd_client_actor, use the CZMQ zactor API:                                              
//                                                                                                      
//  // create an actor with a embedded dd_client                                                        
//   dd_client_actor_t *actor_conf = dd_client_actor_new("client1","tcp://localhost:5555,"./keys.json");
//                                                                                                      
//  // start actor                                                                                      
//  zactor_t *dd_client_actor = zactor_new (dd_client_actor_actor, actor_conf);                         
//                                                                                                      
//  // receive message on "dd_client_actor" as if it is a zsock_t                                       
//  zmsg_t *msg = zmsg_recv(handle);                                                                    
//                                                                                                      
//  // send message through the client                                                                  
//  zsock_send(dd_client_actor, "sss", "subscribe", topic, scope);                                      
//                                                                                                      
//  // destroy the actor                                                                                
//  zactor_destroy (&dd_client_actor);                                                                  
DD_EXPORT void
    dd_client_actor (zsock_t *pipe, void *args);

//  *** Draft method, for development use, may change without warning ***
//  Subscribe to a topic.
DD_EXPORT int
    dd_client_actor_subscribe (zactor_t *actor, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Unsubscribe from a topic.
DD_EXPORT int
    dd_client_actor_unsubscribe (zactor_t *actor, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Publish a message on a topic. It's the callers responsibility to free the message.
DD_EXPORT int
    dd_client_actor_publish (zactor_t *actor, const char *topic, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Send a notification to another DD client. It's the callers responsibility to free the message.
DD_EXPORT int
    dd_client_actor_notify (zactor_t *actor, const char *target, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
DD_EXPORT void
    dd_client_actor_test (bool verbose);

#endif // DD_BUILD_DRAFT_API
----

DESCRIPTION
-----------

dd_client_actor - DoubleDecker client actor

Messages from the actor may be:

  On error:
{string "error", string error_msg, byte error_code}

  On disconnection from broker:
{string "discon", string broker endpoint}

  On connection to broker established:
{string "reg", string broker endpoint}

  On notification received:
{string "data", string source, size_t length, byte data}

  On publication received:
{string "pub", string source, string topic, size_t length, byte data}

Messages to the actor may be:

  To subscribe:
{string "subscribe", string topic, string scope}

  To unsubscribe:
{string "unsubscribe", string topic, string scope}

  To publish:
{string "publish", string topic, byte[] message}

  To notify:
{string "notify", string target, byte [] message}

Sending messages can be simplified using the dd_client_actor_* methods.

EXAMPLE
-------
.From dd_client_actor_test method
----
//  Simple create/destroy test
char *client_name = "testcli";
char *endpoint = "tcp://127.0.0.1:5555";
char *keyfile = "keys/public.keys.json";

// create an actor with a embedded dd_client
dd_client_actor_t *actor_conf = dd_client_actor_new(client_name,endpoint,keyfile);
// run it
zactor_t *actor = zactor_new (dd_client_actor, actor_conf);
sleep(5);
zactor_destroy (&actor);
----
