'\" t
.\"     Title: dd_keys
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 11/21/2016
.\"    Manual: DoubleDecker Manual
.\"    Source: DoubleDecker 0.5.0
.\"  Language: English
.\"
.TH "DD_KEYS" "3" "11/21/2016" "DoubleDecker 0\&.5\&.0" "DoubleDecker Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dd_keys \- Class holding client keys
.SH "SYNOPSIS"
.sp
.nf
//  This API is a draft, and may change without notice\&.
#ifdef DD_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a keys object from a JSON keyfile file
DD_EXPORT dd_keys_t *
    dd_keys_new (const char *filename);

//  *** Draft method, for development use, may change without warning ***
//  Destroy a DoubleDecker JSON keyfile object
DD_EXPORT void
    dd_keys_destroy (dd_keys_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Get the client keys
DD_EXPORT zhash_t *
    dd_keys_clients (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Is the key object representing a public keyset?
DD_EXPORT bool
    dd_keys_ispublic (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the precalculated client \- client key
DD_EXPORT const byte *
    dd_keys_custboxk (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the keyset customer hash
DD_EXPORT const char *
    dd_keys_hash (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the public key
DD_EXPORT const byte *
    dd_keys_pub (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the precalculated client \- broker key
DD_EXPORT const byte *
    dd_keys_ddboxk (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the broker public key
DD_EXPORT const byte *
    dd_keys_ddpub (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the precalculated  public tenant key
DD_EXPORT const byte *
    dd_keys_pubboxk (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the public key of the public tenant key
DD_EXPORT const byte *
    dd_keys_publicpub (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the private key
DD_EXPORT const byte *
    dd_keys_priv (dd_keys_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Increment a nonce
DD_EXPORT void
    dd_keys_nonce_increment (byte *nonce, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class\&.
DD_EXPORT void
    dd_keys_test (bool verbose);

#endif // DD_BUILD_DRAFT_API
.fi
.SH "DESCRIPTION"
.sp
dd_keys \-
.sp
Please add @discuss section in \&.\&./src/dd_keys\&.c\&.
.SH "EXAMPLE"
.PP
\fBFrom dd_keys_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
//  Simple create/destroy test
dd_keys_t *self = dd_keys_new ("keys/public\-keys\&.json");
assert (self);
dd_keys_destroy (&self);
.fi
.if n \{\
.RE
.\}
.sp
.SH "AUTHORS"
.sp
The doubledecker manual was written by the authors in the AUTHORS file\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fB\%\fR\m[]
.sp
Report bugs to the email <\m[blue]\fBponsko@acreo\&.se\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 2015 Pontus Sk\(:oldstr\(:om, Bertrand Pechenot This file is part of libdd, the DoubleDecker hierarchical messaging system DoubleDecker is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License (LGPL) version 2\&.1 as published by the Free Software Foundation\&. As a special exception, the Authors give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module\&. An independent module is a module which is not derived from or based on this library\&. If you modify this library, you must extend this exception to your version of the library\&. DoubleDecker is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU Lesser General Public License for more details\&. You should have received a copy of the GNU Lesser General Public License along with this program\&. If not, see http://www\&.gnu\&.org/licenses/\&. LICENSE included with the doubledecker distribution\&.
.SH "NOTES"
.IP " 1." 4
ponsko@acreo.se
.RS 4
\%mailto:ponsko@acreo.se
.RE
