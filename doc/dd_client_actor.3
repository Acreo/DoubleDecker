'\" t
.\"     Title: dd_client_actor
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/14/2016
.\"    Manual: DoubleDecker Manual
.\"    Source: DoubleDecker 0.5.0
.\"  Language: English
.\"
.TH "DD_CLIENT_ACTOR" "3" "12/14/2016" "DoubleDecker 0\&.5\&.0" "DoubleDecker Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dd_client_actor \- DoubleDecker client actor
.SH "SYNOPSIS"
.sp
.nf
//  This API is a draft, and may change without notice\&.
#ifdef DD_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a new DoubleDecker client actor, with some parameters
DD_EXPORT dd_client_actor_t *
    dd_client_actor_new (const char *client_name, const char *endpoint, const char *keyfile);

//  To work with dd_client_actor, use the CZMQ zactor API:
//
//  // create an actor with a embedded dd_client
//   dd_client_actor_t *actor_conf = dd_client_actor_new("client1","tcp://localhost:5555,"\&./keys\&.json");
//
//  // start actor
//  zactor_t *dd_client_actor = zactor_new (dd_client_actor_actor, actor_conf);
//
//  // receive message on "dd_client_actor" as if it is a zsock_t
//  zmsg_t *msg = zmsg_recv(handle);
//
//  // send message through the client
//  zsock_send(dd_client_actor, "sss", "subscribe", topic, scope);
//
//  // destroy the actor
//  zactor_destroy (&dd_client_actor);
DD_EXPORT void
    dd_client_actor (zsock_t *pipe, void *args);

//  *** Draft method, for development use, may change without warning ***
//  Subscribe to a topic\&.
DD_EXPORT int
    dd_client_actor_subscribe (zactor_t *actor, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Unsubscribe from a topic\&.
DD_EXPORT int
    dd_client_actor_unsubscribe (zactor_t *actor, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Publish a message on a topic\&. It\*(Aqs the callers responsibility to free the message\&.
DD_EXPORT int
    dd_client_actor_publish (zactor_t *actor, const char *topic, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Send a notification to another DD client\&. It\*(Aqs the callers responsibility to free the message\&.
DD_EXPORT int
    dd_client_actor_notify (zactor_t *actor, const char *target, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class\&.
DD_EXPORT void
    dd_client_actor_test (bool verbose);

#endif // DD_BUILD_DRAFT_API
.fi
.SH "DESCRIPTION"
.sp
dd_client_actor \- DoubleDecker client actor
.sp
Messages from the actor may be:
.sp
.if n \{\
.RS 4
.\}
.nf
  On error:
{string "error", string error_msg, byte error_code}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
  On disconnection from broker:
{string "discon", string broker endpoint}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
  On connection to broker established:
{string "reg", string broker endpoint, strict client name}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
  On notification received:
{string "data", string source, size_t length, byte data}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
  On publication received:
{string "pub", string source, string topic, size_t length, byte data}
.fi
.if n \{\
.RE
.\}
.sp
Messages to the actor may be:
.sp
.if n \{\
.RS 4
.\}
.nf
  To subscribe:
{string "subscribe", string topic, string scope}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
  To unsubscribe:
{string "unsubscribe", string topic, string scope}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
  To publish:
{string "publish", string topic, byte[] message}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
  To notify:
{string "notify", string target, byte [] message}
.fi
.if n \{\
.RE
.\}
.sp
Sending messages can be simplified using the dd_client_actor_* methods\&.
.SH "EXAMPLE"
.PP
\fBFrom dd_client_actor_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
//  Simple create/destroy test
char *client_name = "testcli";
char *endpoint = "tcp://127\&.0\&.0\&.1:5555";
char *keyfile = "keys/public\&.keys\&.json";

// create an actor with a embedded dd_client
dd_client_actor_t *actor_conf = dd_client_actor_new(client_name,endpoint,keyfile);
// run it
zactor_t *actor = zactor_new (dd_client_actor, actor_conf);
sleep(5);
zactor_destroy (&actor);
.fi
.if n \{\
.RE
.\}
.sp
.SH "AUTHORS"
.sp
The doubledecker manual was written by the authors in the AUTHORS file\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fB\%\fR\m[]
.sp
Report bugs to the email <\m[blue]\fBponsko@acreo\&.se\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 2015 Pontus Sk\(:oldstr\(:om, Bertrand Pechenot This file is part of libdd, the DoubleDecker hierarchical messaging system DoubleDecker is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License (LGPL) version 2\&.1 as published by the Free Software Foundation\&. As a special exception, the Authors give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module\&. An independent module is a module which is not derived from or based on this library\&. If you modify this library, you must extend this exception to your version of the library\&. DoubleDecker is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU Lesser General Public License for more details\&. You should have received a copy of the GNU Lesser General Public License along with this program\&. If not, see http://www\&.gnu\&.org/licenses/\&. LICENSE included with the doubledecker distribution\&.
.SH "NOTES"
.IP " 1." 4
ponsko@acreo.se
.RS 4
\%mailto:ponsko@acreo.se
.RE
