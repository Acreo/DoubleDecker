#### dd_broker - DoubleDecker broker class

The DoubleDecker broker class allows instatiation of a DoubleDecker broker,
either in a blocking manner or as a zactor.

  See ddbroker.c for examples on how to use the class.

This is the class interface:

```h
    //  This API is a draft, and may change without notice.
    #ifdef DD_BUILD_DRAFT_API
    //  *** Draft method, for development use, may change without warning ***
    //  Create a new DoubleDecker broker
    DD_EXPORT dd_broker_t *
        dd_broker_new (void);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Destroy a DoubleDecker broker
    DD_EXPORT void
        dd_broker_destroy (dd_broker_t **self_p);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Start the broker, blocking until it is stopped.
    DD_EXPORT int
        dd_broker_start (dd_broker_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Start an actor version of the broker, returning a zactor_t object.                                             
    //  The actor version runs in a separate thread, using the zactor_t object to communicate with the starting thread.
    DD_EXPORT zactor_t *
        dd_broker_actor (dd_broker_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the broker scope.                                                           
    //  The scope is a numerical representation of the position in the broker hierarchy.
    //  The hierarchy is currently set to 3 levels, "regionId/clusterId/nodeId".        
    //  A broker in region 0, cluster 1, node 2, would have the scope string "0/1/2"    
    DD_EXPORT int
        dd_broker_set_scope (dd_broker_t *self, const char *scope);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the URI of the broker REST interface.                                                           
    //  For example "tcp://127.0.0.1:8080" , instead of an IP address, "*:8008" allows you to listen to all.
    DD_EXPORT int
        dd_broker_set_rest_uri (dd_broker_t *self, const char *resturi);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the logging file of the broker
    DD_EXPORT int
        dd_broker_set_logfile (dd_broker_t *self, const char *logfile);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the broker loglevel, as a single character string.         
    //  Where "e":error,"w":warning,"n":notice,"i":info, and "d":debug.
    //  "q" will keep all logging quiet                                
    DD_EXPORT int
        dd_broker_set_loglevel (dd_broker_t *self, const char *loglevel);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Checks if the broker is ready to be started, i.e. if the necessary configuration has been done.
    DD_EXPORT bool
        dd_broker_ready (dd_broker_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Remove a broker URI
    DD_EXPORT int
        dd_broker_del_router (dd_broker_t *self, const char *routeruri);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Add a router URI, where the broker listens for new connections
    DD_EXPORT int
        dd_broker_add_router (dd_broker_t *self, const char *routeruri);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Return the current configuration of the routerURI
    DD_EXPORT const char *
        dd_broker_get_router (dd_broker_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the dealer URI for the broker to connect to, typically another brokers router address.
    DD_EXPORT int
        dd_broker_set_dealer (dd_broker_t *self, const char *dealeruri);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the configuration file for the broker, given in CZMQ style format
    DD_EXPORT int
        dd_broker_set_config (dd_broker_t *self, const char *configfile);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the key file for the broker, as generated by ddkeys.py
    DD_EXPORT int
        dd_broker_set_keyfile (dd_broker_t *self, const char *keyfile);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Self test of this class.
    DD_EXPORT void
        dd_broker_test (bool verbose);
    
    #endif // DD_BUILD_DRAFT_API
```

This is the class self test code:

```c
    //  Simple create/destroy test
    dd_broker_t *self = dd_broker_new();
    
    assert (self);
    dd_broker_destroy(&self);
```

