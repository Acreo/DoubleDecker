'\" t
.\"     Title: dd_client
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 11/21/2016
.\"    Manual: DoubleDecker Manual
.\"    Source: DoubleDecker 0.5.0
.\"  Language: English
.\"
.TH "DD_CLIENT" "3" "11/21/2016" "DoubleDecker 0\&.5\&.0" "DoubleDecker Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dd_client \- DoubleDecker callback client class
.SH "SYNOPSIS"
.sp
.nf
//  This API is a draft, and may change without notice\&.
#ifdef DD_BUILD_DRAFT_API
// Callback that is called when a notification from another client has been received\&.
// It\*(Aqs the responsibility of the receiver to free() the data\&.
typedef void (dd_client_on_data) (
    const char *source, const byte *data, size_t length, dd_client_t *self);

// Callback that is called when a publication from another client on a subscribed topic has been received\&.
// It\*(Aqs the responsibility of the receiver to free() the data\&.
typedef void (dd_client_on_pub) (
    const char *source, const char *topic, const byte *data, size_t length, dd_client_t *self);

// Callback that is called when an error has occoured\&.
// Errors are defined in DD_ERROR_\&.
typedef void (dd_client_on_error) (
    int error_code, const char *error_msg, dd_client_t *self);

// Callback called when connection with broker is established\&.
typedef void (dd_client_on_con) (
    dd_client_t *self);

// Callback called when connection with broker is lost\&.
typedef void (dd_client_on_discon) (
    dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Create a new DoubleDecker client
DD_EXPORT dd_client_t *
    dd_client_new (const char *client_name, const char *endpoint, const char *keyfile, dd_client_on_con on_con, dd_client_on_discon on_discon, dd_client_on_data on_data, dd_client_on_pub on_pub, dd_client_on_error on_error);

//  *** Draft method, for development use, may change without warning ***
//  Destroy a DoubleDecker client
DD_EXPORT void
    dd_client_destroy (dd_client_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Subscribe to a topic\&.
DD_EXPORT int
    dd_client_subscribe (dd_client_t *self, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Subscribe to a topic\&.
DD_EXPORT int
    dd_client_unsubscribe (dd_client_t *self, const char *topic, const char *scope);

//  *** Draft method, for development use, may change without warning ***
//  Publish a message on a topic\&. It\*(Aqs the callers responsibility to free the message\&.
DD_EXPORT int
    dd_client_publish (dd_client_t *self, const char *topic, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Send a notification to another DD client\&. It\*(Aqs the callers responsibility to free the message\&.
DD_EXPORT int
    dd_client_notify (dd_client_t *self, const char *target, const byte *message, size_t length);

//  *** Draft method, for development use, may change without warning ***
//  Get a list of topics the client is subscribed to
DD_EXPORT zlistx_t *
    dd_client_get_subscriptions (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the library version
DD_EXPORT const char *
    dd_client_get_version (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the internal state of the client (useful for GUI, etc)
//  Defined in DD_STATE_
DD_EXPORT int
    dd_client_get_state (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the configured endpoint for this DD client
DD_EXPORT const char *
    dd_client_get_endpoint (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the configured keyfile for this DD client
DD_EXPORT const char *
    dd_client_get_keyfile (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the configured public key for this DD client
//  Caller owns return value and must destroy it when done\&.
DD_EXPORT char *
    dd_client_get_pubkey (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the configured public tenant public key for this DD client
//  Caller owns return value and must destroy it when done\&.
DD_EXPORT char *
    dd_client_get_publickey (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the configured private key for this DD client
//  Caller owns return value and must destroy it when done\&.
DD_EXPORT char *
    dd_client_get_privkey (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the actor pipe associated with this dd_client_t instance
//  If no actor is associated with the dd_client_t, return null
DD_EXPORT zsock_t *
    dd_client_get_pipe (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  For dd_client_actor INTERNAL USE ONLY!
DD_EXPORT void *
    dd_client_thread (dd_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  For dd_client_actor INTERNAL USE ONLY!
DD_EXPORT void
    dd_client_add_pipe (dd_client_t *self, zsock_t *pipe, zloop_reader_fn handler);

//  *** Draft method, for development use, may change without warning ***
//  Configure a DoubleDecker client\&.
//  For dd_client_actor only!
//  Caller owns return value and must destroy it when done\&.
DD_EXPORT dd_client_t *
    dd_client_setup (const char *client_name, const char *endpoint, const char *keyfile, dd_client_on_con on_con, dd_client_on_discon on_discon, dd_client_on_data on_data, dd_client_on_pub on_pub, dd_client_on_error on_error);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class\&.
DD_EXPORT void
    dd_client_test (bool verbose);

#endif // DD_BUILD_DRAFT_API
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
 The dd_client class provides methods to instantiate and communicate with a
DoubleDecker client\&. The client can either be instantiated as a callback client or
as an CZMQ zactor\&.
The callback client runs in a separate thread and calling provided methods upon
events such as messages being received\&. The instance of the class is also
used to send and publish messages\&.
In the actor case a client is running in a separate case, but uses a socket to
communicate instead of callbacks and _send/_publish functions\&.
.fi
.if n \{\
.RE
.\}
.sp
Note that the zactor version is defined in a separate header, dd_client_actor\&.h
.SH "EXAMPLE"
.PP
\fBFrom dd_client_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
//  Simple create/destroy test
dd_client_t *self = dd_client_new("testcli","tcp://localhost:5555","keys/public\-keys\&.json",
                                  test_on_reg, test_on_discon,test_on_data,test_on_pub,test_on_error);

assert (self);
printf("sleeping \&.\&. 5s");
sleep(5);
dd_client_destroy (&self);
.fi
.if n \{\
.RE
.\}
.sp
.SH "AUTHORS"
.sp
The doubledecker manual was written by the authors in the AUTHORS file\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fB\%\fR\m[]
.sp
Report bugs to the email <\m[blue]\fBponsko@acreo\&.se\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 2015 Pontus Sk\(:oldstr\(:om, Bertrand Pechenot This file is part of libdd, the DoubleDecker hierarchical messaging system DoubleDecker is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License (LGPL) version 2\&.1 as published by the Free Software Foundation\&. As a special exception, the Authors give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module\&. An independent module is a module which is not derived from or based on this library\&. If you modify this library, you must extend this exception to your version of the library\&. DoubleDecker is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU Lesser General Public License for more details\&. You should have received a copy of the GNU Lesser General Public License along with this program\&. If not, see http://www\&.gnu\&.org/licenses/\&. LICENSE included with the doubledecker distribution\&.
.SH "NOTES"
.IP " 1." 4
ponsko@acreo.se
.RS 4
\%mailto:ponsko@acreo.se
.RE
