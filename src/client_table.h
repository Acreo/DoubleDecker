/*  =========================================================================
    client_table - DoubleDecker client table

        Copyright (c) 2015 Pontus Sköldström, Bertrand Pechenot

        This file is part of libdd, the DoubleDecker hierarchical
        messaging system DoubleDecker is free software; you can
        redistribute it and/or modify it under the terms of the GNU Lesser
        General Public License (LGPL) version 2.1 as published by the Free
        Software Foundation.

        As a special exception, the Authors give you permission to link this
        library with independent modules to produce an executable,
        regardless of the license terms of these independent modules, and to
        copy and distribute the resulting executable under terms of your
        choice, provided that you also meet, for each linked independent
        module, the terms and conditions of the license of that module. An
        independent module is a module which is not derived from or based on
        this library.  If you modify this library, you must extend this
        exception to your version of the library.  DoubleDecker is
        distributed in the hope that it will be useful, but WITHOUT ANY
        WARRANTY; without even the implied warranty of MERCHANTABILITY or
        FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
        License for more details.  You should have received a copy of the
        GNU Lesser General Public License along with this program.  If not,
        see http://www.gnu.org/licenses/.
    =========================================================================
*/

#ifndef CLIENT_TABLE_H_INCLUDED
#define CLIENT_TABLE_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _client_table_t client_table_t;

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/client_table.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef DD_BUILD_DRAFT_API
// Function prototype that can be used with foreach_local
typedef void (client_table_fn) (
    void *self);

// Function prototype that can be used with foreach_arg_local
typedef void (client_table_arg_fn) (
    void *self, void *arg);

//  *** Draft method, for development use, may change without warning ***
//  Create a new client table
DD_EXPORT client_table_t *
    client_table_new (void);

//  *** Draft method, for development use, may change without warning ***
//  Destroy a client table
DD_EXPORT void
    client_table_destroy (client_table_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Check whether there's an client with this name
DD_EXPORT bool
    client_table_has_node_hash (client_table_t *self, zframe_t *sockid, zframe_t *cookie, bool update_timer);

//  *** Draft method, for development use, may change without warning ***
//  If a client with this sockid and cookie exists, return it, otherwise NULL.
DD_EXPORT local_client_t *
    client_table_get_node_hash (client_table_t *self, zframe_t *sockid, zframe_t *cookie, bool update_timer);

//  *** Draft method, for development use, may change without warning ***
//  Deletes the client with this sockid and cookie
DD_EXPORT bool
    client_table_del_node_hash (client_table_t *self, zframe_t *sockid, zframe_t *cookie);

//  *** Draft method, for development use, may change without warning ***
//  Deletes the client (local_client_t, dist_client_t, or local_broker_t) reference by node
DD_EXPORT bool
    client_table_del_node (client_table_t *self, void *node);

//  *** Draft method, for development use, may change without warning ***
//  Check whether there's an client with this name
DD_EXPORT bool
    client_table_has_node_name (client_table_t *self, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  If a client with this name exists, return it, otherwise NULL.               
//  Can return local_client or dist_client, use _is() to figure out which it is.
//  Returns NULL if not found                                                   
DD_EXPORT void *
    client_table_get_node_name (client_table_t *self, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Deletes the client with this name
DD_EXPORT int
    client_table_del_node_name (client_table_t *self, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Insert a local client to the table
DD_EXPORT bool
    client_table_insert_local (client_table_t *self, local_client_t *client);

//  *** Draft method, for development use, may change without warning ***
//  Insert a distant client to the table
DD_EXPORT bool
    client_table_insert_dist (client_table_t *self, dist_client_t *client);

//  *** Draft method, for development use, may change without warning ***
//  Insert a broker to the table
DD_EXPORT bool
    client_table_insert_broker (client_table_t *self, local_broker_t *broker);

//  *** Draft method, for development use, may change without warning ***
//  Returns the JSON represenation of the object
//  Caller owns return value and must destroy it when done.
DD_EXPORT json_object_t *
    client_table_json (client_table_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Call method on each local client
DD_EXPORT void
    client_table_foreach (client_table_t *self, client_table_fn function);

//  *** Draft method, for development use, may change without warning ***
//  Call method on each client, with supplied argument
DD_EXPORT void
    client_table_foreach_arg (client_table_t *self, client_table_arg_fn function, void *arg);

//  *** Draft method, for development use, may change without warning ***
//  Call method on each local client, with supplied argument
DD_EXPORT void
    client_table_local_foreach_arg (client_table_t *self, client_table_arg_fn function, void *arg);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
DD_EXPORT void
    client_table_test (bool verbose);

#endif // DD_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
