/*  =========================================================================
    local_client - DoubleDecker local client class

        Copyright (c) 2015 Pontus Sköldström, Bertrand Pechenot           
                                                                            
        This file is part of libdd, the DoubleDecker hierarchical           
        messaging system DoubleDecker is free software; you can             
        redistribute it and/or modify it under the terms of the GNU Lesser  
        General Public License (LGPL) version 2.1 as published by the Free  
        Software Foundation.                                                
                                                                            
        As a special exception, the Authors give you permission to link this
        library with independent modules to produce an executable,          
        regardless of the license terms of these independent modules, and to
        copy and distribute the resulting executable under terms of your    
        choice, provided that you also meet, for each linked independent    
        module, the terms and conditions of the license of that module. An  
        independent module is a module which is not derived from or based on
        this library.  If you modify this library, you must extend this     
        exception to your version of the library.  DoubleDecker is          
        distributed in the hope that it will be useful, but WITHOUT ANY     
        WARRANTY; without even the implied warranty of MERCHANTABILITY or   
        FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
        License for more details.  You should have received a copy of the   
        GNU Lesser General Public License along with this program.  If not, 
        see http://www.gnu.org/licenses/.                                   
    =========================================================================
*/

#ifndef LOCAL_CLIENT_H_INCLUDED
#define LOCAL_CLIENT_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _local_client_t local_client_t;
#define LOCAL_CLIENT_TAG 0xf0f595aa
//  Structure of our class
#include "tommy.h"
struct _local_client_t {
  uint32_t tag;
  char *name; // client name		/* Node content */
  char *prefix_name;
  char *tenant;
  zframe_t *cookie;
  zframe_t *sockid;
  int timeout;
  tommy_node sockid_node;
  tommy_node string_node;
//  struct cds_lfht_node lcl_node; // Chaining in hash table
//  struct cds_lfht_node rev_node; // Chaining in hash table
};

typedef struct json_object json_object_t;


//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/local_client.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef DD_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a new local client
DD_EXPORT local_client_t *
    local_client_new (const char *name, const char *tenant, zframe_t *sockid, zframe_t *cookie);

//  *** Draft method, for development use, may change without warning ***
//  Destroy a local client
DD_EXPORT void
    local_client_destroy (local_client_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Probe the supplied object, and report if it looks like a dd_local_client_t.
DD_EXPORT bool
    local_client_is (void *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the short name of this client
DD_EXPORT const char *
    local_client_get_name (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the full name of this client
DD_EXPORT const char *
    local_client_get_prefix_name (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the tenant name of this client
DD_EXPORT const char *
    local_client_get_tenant_name (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the cookie of this client
DD_EXPORT uint64_t
    local_client_get_cookie (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the cookie of this client
DD_EXPORT zframe_t *
    local_client_get_cookie_zframe (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the socket id of this client
DD_EXPORT zframe_t *
    local_client_get_sockid (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the hash value of this distant client
DD_EXPORT uint32_t
    local_client_string_hash (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the hash value of this distant client
DD_EXPORT uint32_t
    local_client_sockid_hash (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the short name of this client
DD_EXPORT void
    local_client_set_name (local_client_t *self, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Set the full name of this client
DD_EXPORT void
    local_client_set_prefix_name (local_client_t *self, const char *prefix_name);

//  *** Draft method, for development use, may change without warning ***
//  Set the tenant name of this client
DD_EXPORT void
    local_client_set_tenant_name (local_client_t *self, const char *tenant_name);

//  *** Draft method, for development use, may change without warning ***
//  Set the cookie of this client
DD_EXPORT void
    local_client_set_cookie (local_client_t *self, uint64_t cookie);

//  *** Draft method, for development use, may change without warning ***
//  Set the cookie of this client
DD_EXPORT void
    local_client_set_cookie_zframe (local_client_t *self, zframe_t *cookie);

//  *** Draft method, for development use, may change without warning ***
//  Set the socket id of this client
DD_EXPORT void
    local_client_set_sockid (local_client_t *self, zframe_t *sockid);

//  *** Draft method, for development use, may change without warning ***
//  Reset the timeout value for local client
DD_EXPORT void
    local_client_reset_timeout (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Increment the timeout value for local client
DD_EXPORT int
    local_client_increment_timeout (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Check if the local client has timed out
DD_EXPORT bool
    local_client_timed_out (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Returns the JSON represenation of the object
//  Caller owns return value and must destroy it when done.
DD_EXPORT json_object_t *
    local_client_json (local_client_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
DD_EXPORT void
    local_client_test (bool verbose);

#endif // DD_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
